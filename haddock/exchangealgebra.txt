-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/ExchangeAlgebra#readme</a>
@package exchangealgebra
@version 0.1.0.0

module ExchangeAlgebra
class (Ord a, Show a, Eq a) => Name a
class (Ord a, Show a, Eq a) => Unit a
class (Ord a, Show a, Eq a) => Subject a
class (Show a, Eq a, Ord a) => Base a
getHat :: Base a => a -> Hat
revHat :: Base a => a -> a
isHat :: Base a => a -> Bool
data Hat
Hat :: Hat
Not :: Hat
class Redundant a
(.^) :: Redundant a => a -> a
(.~) :: Redundant a => a -> a
norm :: Redundant a => a -> Double
data Alg b
[Zero] :: Alg b
[:@] :: (Base b) => {val :: !Double, base :: !b} -> Alg b
[:+] :: (Base b) => !(Alg b) -> !(Alg b) -> Alg b
(.+) :: (Base b) => Alg b -> Alg b -> Alg b
infixr 5 .+
vals :: Alg b -> [Double]
bases :: Alg b -> [Maybe b]
length :: Alg b -> Int
isZero :: Alg b -> Bool
isSingle :: Alg b -> Bool
isSIngle :: () => Alg b -> Bool
isFormula :: Alg b -> Bool
fromList :: (Base b) => [Alg b] -> Alg b
toList :: Alg b -> [Alg b]
head :: Alg b -> Alg b
tail :: Alg b -> Alg b
map :: (Alg b -> Alg b) -> Alg b -> Alg b
filter :: (Alg b -> Bool) -> Alg b -> [Alg b]
proj :: (Base b) => b -> Alg b -> Alg b
projNorm :: (Base b) => b -> Alg b -> Double
transfer :: (Base b) => b -> b -> Alg b -> Alg b
sort :: (Ord b) => Alg b -> Alg b
normSort :: Alg b -> Alg b
class (Redundant a) => Exchange a
subject :: Exchange a => a -> AccountTitles
unit :: Exchange a => a -> CountUnit
decR :: Exchange a => a -> a
decL :: Exchange a => a -> a
decP :: Exchange a => a -> a
decM :: Exchange a => a -> a
balance :: Exchange a => a -> Bool
class (Base a) => ExBase a
whatDiv :: ExBase a => a -> AccountDivision
whatPIMO :: ExBase a => a -> PIMO
whichSide :: ExBase a => a -> Side
class AccountBase a
(<=>) :: AccountBase a => a -> a -> Bool
data AccountDivision
Assets :: AccountDivision
Equity :: AccountDivision
Liability :: AccountDivision
Cost :: AccountDivision
Revenue :: AccountDivision
data PIMO
PS :: PIMO
IN :: PIMO
MS :: PIMO
OUT :: PIMO
data Side
Credit :: Side
Debit :: Side
switchSide :: Side -> Side
data AccountTitles
Cash :: AccountTitles
Deposits :: AccountTitles
NationalBonds :: AccountTitles
Products :: Text -> AccountTitles
[detail] :: AccountTitles -> Text
StockInvectment :: AccountTitles
EquipmentInvestment :: AccountTitles
LoansReceivable :: AccountTitles
ReserveDepositReceivable :: AccountTitles
Gold :: AccountTitles
GovernmentService :: AccountTitles
CapitalStock :: AccountTitles
RetainedEarnings :: AccountTitles
LoansPayable :: AccountTitles
ReserveForDepreciation :: AccountTitles
DepositPayable :: AccountTitles
NationalBondsPayable :: AccountTitles
ReserveDepositPayable :: AccountTitles
CentralBankNotePayable :: AccountTitles
Depreciation :: AccountTitles
WageExpenditure :: AccountTitles
InterestExpense :: AccountTitles
TaxesExpense :: AccountTitles
ConsumptionExpenditure :: AccountTitles
SubsidyExpense :: AccountTitles
CentralBankPaymentExpence :: AccountTitles
ValueAdded :: AccountTitles
SubsidyIncome :: AccountTitles
NationalBondInterestEarned :: AccountTitles
DepositInterestEarned :: AccountTitles
GrossProfit :: AccountTitles
OrdinaryProfit :: AccountTitles
InterestEarned :: AccountTitles
WageEarned :: AccountTitles
TaxesRevenue :: AccountTitles
CentralBankPaymentIncome :: AccountTitles
data CountUnit
Yen :: CountUnit
Amount :: CountUnit
type JustRedundant = Alg Hat
data Base1 h s
[SBase] :: (Subject u) => Hat -> u -> Base1 Hat u
(.<) :: () => a -> b -> (a, b)
infixr 8 .<
data MDBase h u s
[:<] :: (Unit u, Subject s) => !Hat -> !(u, s) -> MDBase Hat u s
type ExMDBase = MDBase Hat CountUnit AccountTitles
type Ex2Base = MDBase Hat CountUnit AccountTitles
type Ex2Alg = Alg Ex2Base
instance GHC.Classes.Eq ExchangeAlgebra.CountUnit
instance GHC.Show.Show ExchangeAlgebra.CountUnit
instance GHC.Classes.Ord ExchangeAlgebra.CountUnit
instance GHC.Classes.Eq ExchangeAlgebra.AccountTitles
instance GHC.Show.Show ExchangeAlgebra.AccountTitles
instance GHC.Classes.Eq ExchangeAlgebra.Side
instance GHC.Show.Show ExchangeAlgebra.Side
instance GHC.Classes.Ord ExchangeAlgebra.Side
instance GHC.Classes.Eq ExchangeAlgebra.PIMO
instance GHC.Show.Show ExchangeAlgebra.PIMO
instance GHC.Classes.Ord ExchangeAlgebra.PIMO
instance GHC.Classes.Eq ExchangeAlgebra.AccountDivision
instance GHC.Show.Show ExchangeAlgebra.AccountDivision
instance GHC.Classes.Ord ExchangeAlgebra.AccountDivision
instance GHC.Classes.Eq ExchangeAlgebra.Hat
instance GHC.Classes.Ord ExchangeAlgebra.Hat
instance ExchangeAlgebra.Exchange ExchangeAlgebra.Ex2Alg
instance ExchangeAlgebra.ExBase ExchangeAlgebra.ExMDBase
instance (ExchangeAlgebra.Unit b, ExchangeAlgebra.Subject c) => GHC.Classes.Eq (ExchangeAlgebra.MDBase h b c)
instance GHC.Show.Show (ExchangeAlgebra.MDBase h a b)
instance (ExchangeAlgebra.Unit u, ExchangeAlgebra.Subject s) => ExchangeAlgebra.Base (ExchangeAlgebra.MDBase ExchangeAlgebra.Hat u s)
instance (ExchangeAlgebra.Unit u, ExchangeAlgebra.Subject s) => GHC.Classes.Ord (ExchangeAlgebra.MDBase ExchangeAlgebra.Hat u s)
instance ExchangeAlgebra.Unit ExchangeAlgebra.CountUnit
instance ExchangeAlgebra.Subject ExchangeAlgebra.AccountTitles
instance GHC.Enum.Enum ExchangeAlgebra.AccountTitles
instance GHC.Classes.Ord ExchangeAlgebra.AccountTitles
instance ExchangeAlgebra.AccountBase ExchangeAlgebra.PIMO
instance ExchangeAlgebra.AccountBase ExchangeAlgebra.AccountDivision
instance GHC.Show.Show b => GHC.Show.Show (ExchangeAlgebra.Alg b)
instance (ExchangeAlgebra.Base b, GHC.Classes.Ord b, GHC.Classes.Eq b) => GHC.Classes.Eq (ExchangeAlgebra.Alg b)
instance (ExchangeAlgebra.Base b, GHC.Classes.Ord b) => GHC.Classes.Ord (ExchangeAlgebra.Alg b)
instance ExchangeAlgebra.Base b => GHC.Base.Semigroup (ExchangeAlgebra.Alg b)
instance ExchangeAlgebra.Base b => GHC.Base.Monoid (ExchangeAlgebra.Alg b)
instance ExchangeAlgebra.Base b => ExchangeAlgebra.Redundant (ExchangeAlgebra.Alg b)
instance ExchangeAlgebra.Base ExchangeAlgebra.Hat
instance GHC.Show.Show ExchangeAlgebra.Hat
instance ExchangeAlgebra.Name Data.Text.Internal.Text

module Lib
someFunc :: IO ()
